<!DOCTYPE html>
<html lang="en">
<head>
<title>MatHack MRS Fall 2014</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <style>
      body {
        margin: 0px;
        overflow: hidden;
      }
      #example {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
      }
    </style>
</head>
<body>
<div id=example style=position:absolute; ></div>

<script src="../js/third-party/threejs/three.min.js"></script>
<script src="../js/third-party/threejs/StereoEffect.js"></script>
<script src="../js/third-party/threejs/DeviceOrientationControls.js"></script>
<script src="../js/third-party/threejs/OrbitControls.js"></script>

<script>
    var camera, scene, renderer;
    var effect, controls;
    var element, container;
    var as_mesh = [] ;

    var clock = new THREE.Clock();
    var geometry = new THREE.PlaneGeometry(1000, 1000);
    var mesh = new THREE.Mesh(geometry, material);
    var material = new THREE.MeshPhongMaterial( {color:0xffffff} );

    init();
    animate();

    function init() {
      renderer = new THREE.WebGLRenderer();
      element = renderer.domElement;
      container = document.getElementById('example');
      container.appendChild(element);

      effect = new THREE.StereoEffect(renderer);

      scene = new THREE.Scene();

      camera = new THREE.PerspectiveCamera( 45, container.offsetWidth / container.offsetHeight, 1, 1000 );
      camera.position.set(50, 300, 50);
      scene.add(camera);

      controls = new THREE.OrbitControls(camera, element);
      controls.rotateUp(Math.PI / 0.1);
      controls.target.set(
        camera.position.x + 1.0,
        camera.position.y,
        camera.position.z
      );
      controls.noZoom = true;
      controls.noPan = true;
      controls.autoRotate = false;

      function setOrientationControls(e) {
        if (!e.alpha) {
          return;
        }

        controls = new THREE.DeviceOrientationControls(camera, true);
        controls.connect();
        controls.update();

        element.addEventListener('click', fullscreen, false);

        window.removeEventListener('deviceorientation', setOrientationControls);
      }
      window.addEventListener('deviceorientation', setOrientationControls, true);

      var light = new THREE.HemisphereLight(0xffffff, 0x000000, 0.6);
      scene.add(light);

      geometry = new THREE.SphereGeometry(2,8,8);
      material = new THREE.MeshPhongMaterial( {color:0xffffff} );

		as_mesh[0] = new THREE.Mesh( geometry, material );
		as_mesh[0].position.set(41.027400,38.577600,57.502590); scene.add( as_mesh[0] );

      geometry = new THREE.SphereGeometry(4,8,8);
      material = new THREE.As_MeshPhongMaterial( {color:0x7777ff} );

                mesh = new THREE.Mesh( geometry, material );
                mesh.position.set(38.795930,30.207660,38.416790); scene.add( mesh );
                mesh = new THREE.Mesh( geometry, material );
                mesh.position.set(79.118880,30.207660,5.463240); scene.add( mesh );
                mesh = new THREE.Mesh( geometry, material );
                mesh.position.set(41.849990,90.622980,49.343270); scene.add( mesh );
                mesh = new THREE.Mesh( geometry, material );
                mesh.position.set(1.527030,90.622980,82.296830); scene.add( mesh );
                mesh = new THREE.Mesh( geometry, material );
                mesh.position.set(-1.527030,30.207660,5.463240); scene.add( mesh );
                mesh = new THREE.Mesh( geometry, material );
                mesh.position.set(82.172940,90.622980,82.296830); scene.add( mesh );

      geometry = new THREE.SphereGeometry(6,8,8);
      material = new THREE.MeshPhongMaterial( {color:0xff7777} );

		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(40.322960,0.000000,0.000000); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(40.322960,0.000000,87.760070); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(40.322960,120.830630,0.000000); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(40.322960,120.830630,87.760070); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(0.000000,60.415320,43.880030); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(80.645910,60.415320,43.880030); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(40.322960,60.415320,0.000000); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(40.322960,60.415320,87.760070); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(0.000000,0.000000,43.880030); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(0.000000,120.830630,43.880030); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(80.645910,0.000000,43.880030); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(80.645910,120.830630,43.880030); scene.add( mesh );

      geometry = new THREE.SphereGeometry(6,8,8);
      material = new THREE.MeshPhongMaterial( {color:0x77ff77} );

                mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(37.659300,30.207660,1.589770); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(77.982260,30.207660,42.290260); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(42.986610,90.622980,86.170290); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(2.663650,90.622980,45.469800); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(64.176080,3.547590,69.238570); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(23.853130,56.867730,62.401530); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(16.469830,63.962900,18.521500); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(56.792790,117.283050,25.358540); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(16.469830,117.283050,18.521500); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(56.792790,63.962900,25.358540); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(64.176080,56.867730,69.238570); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(23.853130,3.547590,62.401530); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(37.659300,30.207660,89.349840); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(-2.663660,30.207660,42.290260); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(42.986610,90.622980,-1.589770); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(83.309560,90.622980,45.469800); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(64.176080,124.378220,69.238570); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(56.792790,-3.547590,25.358540); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(16.469830,-3.547590,18.521500); scene.add( mesh );
		mesh = new THREE.Mesh( geometry, material );
		mesh.position.set(23.853130,124.378220,62.401530); scene.add( mesh );

      window.addEventListener('resize', resize, false);
      setTimeout(resize, 1);
    }

    function resize() {
      var width = container.offsetWidth;
      var height = container.offsetHeight;

      camera.aspect = width / height;
      camera.updateProjectionMatrix();

      renderer.setSize(width, height);
      effect.setSize(width, height);
    }

    function update(dt) {
      resize();

      camera.updateProjectionMatrix();

      controls.update(dt);
    }

    function render(dt) {
      var time = Date.now();
      as_mesh[0].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[1].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[2].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[3].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[4].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[5].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[6].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[7].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[8].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[9].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[10].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[11].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[12].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[13].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[14].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[15].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[16].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[17].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[18].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[19].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[20].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[21].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[22].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[23].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[24].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[25].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[26].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[27].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[28].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      as_mesh[29].translateZ(0.1*Math.sin((time)*10e-3+100*Math.random() ));
      effect.render(scene, camera);
    }

    function animate(t) {
      requestAnimationFrame(animate);

      update(clock.getDelta());
      render(clock.getDelta());
    }

    function fullscreen() {
      if (container.requestFullscreen) {
        container.requestFullscreen();
      } else if (container.msRequestFullscreen) {
        container.msRequestFullscreen();
      } else if (container.mozRequestFullScreen) {
        container.mozRequestFullScreen();
      } else if (container.webkitRequestFullscreen) {
        container.webkitRequestFullscreen();
      }
    }
  </script>
  </body>
</html>
